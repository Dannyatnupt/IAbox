function NumSols = ExactNumberOfSolutions(nT,nR,D)
% NumberOfSolutionsClosedForm returns the number of IA solutions of those
% scenarios for which they are known exactly.
% Returns NumSols=-1 if number of solution is unknown
%
% References:
% Ó. González, C. Beltrán, and I. Santamaría, "On the Number of Interference 
% Alignment Solutions for the K-User MIMO Channel with Constant Coefficients,"
% ArXiv preprint available: http://arxiv.org/abs/1301.6196, Jan. 2013.
%
% G. Bresler, D. Cartwright, and D. Tse, "Interference alignment for the 
% MIMO interference channel," ArXiv preprint available: 
% http//arxiv.org/abs/1303.5678, Mar. 2013.
%%
nT=nT(:);
nR=nR(:);
if isvector(D)
    d=D(:);
else
    d=diag(D);
end
K=length(nT);

%%
if all(nT==nT(1)) && all(nR==nR(1)) && all(d==d(1)) && (nT(1)+nR(1))==((K+1)*d(1)) %System is symmetric and tight
    if d(1)==1
        if  nT(1)==2 || nR(1)==2
            %CASE: if symmetric and nT or nR equal 2
            NumSols=round(factorial(K)/exp(1));
        elseif nT(1)==3 || nR(1)==3
            %CASE: if symmetric and nT or nR equal 3
            %         NumSols=0;
            %         for k=0:K
            %             for s=0:k
            %                 for j=0:(K-k)
            %                     num=(-1)^(k+j-s)*factorial(K)*factorial(K-k)*factorial(2*K-k-2*j-s);
            %                     den=factorial(s)*factorial(k-s)*factorial(K-k-j)^2*factorial(j)*2^(2*K-2*k-j);
            %                     NumSols=NumSols+num/den;
            %                 end
            %             end
            %         end
            
            real_value=[1,...
                9,...
                216,...
                7570,...
                357435,...
                22040361,...
                1721632024,...
                166261966956,...
                19459238879565,...
                2714812050902545,...
                445202898702992496,...
                84798391618743138414,...
                18567039007438379656471,...
                4631381194792101913679985,...
                1305719477625154539392776080,...
                413153055417968797025496881656,...
                145805159431941453002147012647929,...
                57068107225598546939327028600928761,...
                24647264090173195352486685597674999080,...
                11692295989434552630577105904794156141290,...
                6066885060026725326590776684425359774363091,...
                3430053646893005938877548985478796482234740569,...
                2105599663585682204404444902996898661677861497576,...
                1398882564790484689907923829002775442712551665672100,...
                1002800967824888437029944143961214350129344602512433925,...
                773515006615511153431082276715512165801236106002649940801,...
                640354904933099215511032282069134747640469542437491636947584,...
                567576719539891063820900427180506660628123987511580035858524166,...
                537406501344685267505329665834874322349027306021842662754364029295,...
                542426264309508590572260867761981475244340678111036335369437235205985,...
                582477841350089666726399800549588160519823459059405376763866267143717536,...
                664219936122309571196529394486566156439291698972492681576911066576682970224,...
                802930688629619386881324401141937061448125226498799804486322983190817859367281,...
                1027213447829845810156286015983822857300658269961667445016979621069063715830114665,...
                1388615792914314443279743771876006562217526506870566051568916691148043157392583625720,...
                1980618465999015523470076189093533046496477854703052715576850704807459531140282797988546,...
                2976520420548043584227085966825881314731326396813906376395808152495715861030223037865429739,...
                4706836636838346414710426661787529261450190067766000005316367512726447017031365408055893926921,...
                7821915155735646867906686336414434309416354133554803364586135305310264540600704339130715781435960,...
                13643909305359799820947950844194642169588916977712786147773247539269055313376070602512061138985196380,...
                24952207730074525394294307912088990133131011267260215501665042799573981534383598266541532612190056491581,...
                47791338252922435239855021562755847675781835958641886905430013993950983151571276795698551277696348414086129,...
                95764929729586386707396699744456191435285978829685399534591313556693543586675411100141395845697939092557144336,...
                200561649877953395069880489859987826197894561278825248812492589863767454944633008983503595582852113779305643558430,...
                438590365546098340107054410715856552752705426727519424565845452746211466768806800271744148406014127750452329588006215,...
                1000560326926936688712886992862263799340691142288451285111404833147502188259684392919652968833555490331686833851167250641];
            NumSols=real_value(K-2);
        elseif nT(1)==4 || nR(1)==4
            %CASE: if symmetric and nT or nR equal 4
            real_value=[1,44,7570,1975560,749649145,399035751464,...
                289021136349036,277435664056527360,...
                345023964977303838105,545099236551025860229460,...
                1075595203804151695555622446];
            NumSols=real_value(K-3);
        end
    else
        if K==3
            if all(nT==nR)
                %CASE: if symmetric, K=3, and nT equal to nR
                NumSols=nchoosek(2*d(1),d(1));
            else
                %CASE: if symmetric, K=3, and distinct nT and nR
                NumSols=1;
            end
        end
    end
else %ToDo: approximate by means of Katz-Powell formula
    NumSols=-1;
end